name: Monitor and Build sing-box on New Tag

# conditionï¼šhourly or dispatch
on:
  schedule:
    - cron: '0 * * * *'  # hourly
  workflow_dispatch:  # dispatch

jobs:
  check_and_build:
    strategy:
      matrix:
        include:
          - name: linux-mipsel-softfloat
            goos: linux
            goarch: mipsle
            gomips: softfloat
          - name: linux-mipsel-hardfloat
            goos: linux
            goarch: mipsle
            gomips: hardfloat
          - name: linux-arm-v7
            goos: linux
            goarch: arm
            goarm: 7
      fail-fast: true
    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOAMD64: ${{ matrix.goamd64 }}
      GOARM: ${{ matrix.goarm }}
      GOMIPS: ${{ matrix.gomips }}
      CGO_ENABLED: 0
      # TAGS: with_clash_api,with_quic
    outputs:
      latest_tag_output: ${{ env.LATEST_TAG }}

    steps:
      # Step 1: get latest tag
      - name: Get latest tag from SagerNet/sing-box
        id: get_tag
        run: |
          latest_tag=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases | jq -r '[.[] | select(.prerelease == false)][0].tag_name')
          echo "Latest tag from SagerNet/sing-box is: $latest_tag"
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      # Step 2: check new tag
      - name: Check for new tag
        id: check_tag
        run: |
          echo "Current directory:"
          pwd
          echo "List files in the directory:"
          ls -la
          if [ -f last_tag.txt ]; then
            LAST_TAG=$(cat last_tag.txt)
          else
            LAST_TAG=""
          fi
          echo "Last checked tag: $LAST_TAG"
          if [ "${{ env.LATEST_TAG }}" != "$LAST_TAG" ]; then
            echo "New tag detected: ${{ env.LATEST_TAG }}"
            echo "${{ env.LATEST_TAG }}" > last_tag.txt
          else
            echo "No new tag detected."
            exit 0
          fi

      # Step 3: git clone SagerNet/sing-box
      - name: Clone sing-box repository
        run: |
          git clone --depth 1 --branch ${{ env.LATEST_TAG }} https://github.com/SagerNet/sing-box.git
          cd sing-box

      - name: Check the working directory
        run: |
          cd sing-box
          echo "Current directory:"
          pwd
          echo "List files in the directory:"
          ls -la
          echo "Check Go version:"
          go version
          echo "Check Go modules:"
          go mod tidy

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ^1.23

      # Step 4: cross build and tar
      - name: Build the program
        run: |
          echo "Building for: ${{ matrix.name }}"
          make
          output_file_name="sing-box-${{ env.LATEST_TAG }}-${{ matrix.name }}.tar.gz"
          mkdir ../build
          tar -zcvf ../build/${output_file_name} sing-box
          rm sing-box
        working-directory: ./sing-box

      - name: List built files
        run: |
          cd ./build
          echo "List the files in the directory to ensure builds exist"
          ls -la

      # Step 5: upload file
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sing-box-builds-${{ env.LATEST_TAG }}
          path: ./build

  release:
    needs: check_and_build
    runs-on: ubuntu-latest
    env:
      LATEST_TAG: ${{ needs.check_and_build.outputs.latest_tag_output }}

    steps:
      # Step 1: checkout
      - name: Checkout your repository
        uses: actions/checkout@v3

      # Step 2: download
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: sing-box-builds-${{ env.LATEST_TAG }}

      # Step 3: release to repo
      - name: Create GitHub Release in your repo
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.LATEST_TAG }}
          files: ${{ github.workspace }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

